'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/1_environment-setup/','title':"1 Environment Setup",'content':"Environment Setup Once you have logged into the AWS Management Console, you’ll need to do the following:\n Configure AWS Deploy a Jumpbox in EC2 Install the BOSH CLI  Configure AWS Now we need to configure the AWS environment. Go to the BOSH AWS Configuration page for instructions.\nNote You will need to modify the region from us-east-1 to your GovCloud region! I also recommend everyone create their own VPC if possible. If not then we’ll need to keep track of subnets/ranges.  Deploy Jumpbox Now we’ll need a Jumpbox up in AWS to perform the commands. (You can run it locally but for the sake of simplicity we’ll run everything in the cloud.)\n Go to EC2 Click on Instances Click on Launch Instance  You’ll have a number of options to choose from. (More than likely.)\n Click on Select on the “Amazon Linux 2 AMI” row.\n Now I recommend choosing a VM size of M5.Large or M5.XLarge. The extra cores and memory will help with compiling times.\nOnce you have it selected choose Next.\n Make sure you select your BOSH VPC and choose your subnet. You only need one instance so keep it at the default Change Auto Assign Public IP to Enable  Scroll to the bottom to Network Interfaces. In the Primary IP field enter: 10.0.0.5   Click Next\nChange the storage size from 8 GB to something more reasonable. I recommend 32 GB.\n Click Next\nNo need to add tags at this time. It’s up to you!\nClick Next\nChoose Select an existing security group and choose your BOSH security group! Click Review and Launch\nReview the details then Launch\nYou will need to choose a key pair. Make sure you select your BOSH keypair.\n Click Launch Instances and wait for your Jumpbox to launch.\nNote\nBe sure your instance has a Private IP of 10.0.0.5 and it has a Public DNS entry!\n Jumpbox Config Now that we have a jumpbox we need to configure it!\nEnsure your PEM file has the correct permissions (If on Linux and MacOS)\nchmod 600 bosh.pem Transfer your PEM file to the Jumpbox\nscp -i ./bosh.pem ./bosh.pem ec2-user@\u0026lt;IP ADDRESS\u0026gt;:~ Log into your Jumpbox:\nssh -i ./bosh.pem ec2-user@\u0026lt;IP ADDRESS\u0026gt; Once on the server you’ll need to install some packages to make everything function properly.\nsudo yum install gcc gcc-c++ ruby ruby-devel mysql-devel postgresql-devel postgresql-libs sqlite-devel libxslt-devel libxml2-devel patch openssl git Install BOSH CLI Download the latest version of the BOSH CLI\ncurl -JL -o bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v6.2.1/bosh-cli-6.2.1-linux-amd64 Make the bosh binary executable and move the binary to your PATH:\nchmod +x ./bosh sudo mv ./bosh /usr/local/bin/bosh You should now be able to use bosh. Verify by querying the CLI for its version:\nbosh -v # version 5.3.1-8366c6fd-2018-09-25T18:25:51Z # Succeeded "});index.add({'id':1,'href':'/docs/2_deploy-director/','title':"2 Deploy Director",'content':"Deploy Director First we need to download the BOSH Deployment scripts\ngit clone https://github.com/cloudfoundry/bosh-deployment Next we need to create a file called deploy.sh to make the process of deploying a BOSH director easier. Copy the code below and make modifications were necessary.\n#!/bin/bash bosh create-env bosh-deployment/bosh.yml \\ --state=state.json \\ --vars-store=creds.yml \\ -o bosh-deployment/aws/cpi.yml \\ -o bosh-deployment/jumpbox-user.yml \\ -v director_name=aws \\ -v internal_cidr=10.0.0.0/24 \\ -v internal_gw=10.0.0.1 \\ -v internal_ip=10.0.0.6 \\ -v access_key_id=\u0026lt;ACCESS KEY\u0026gt; \\ -v secret_access_key=\u0026lt;SECRET KEY\u0026gt; \\ -v region=us-east-1 \\ -v az=us-east-1a \\ -v default_key_name=bosh \\ -v default_security_groups=[bosh] \\ --var-file private_key=~/bosh.pem \\ -v subnet_id=\u0026lt;SUBNET ID\u0026gt; Make the script executable\nchmod +x deploy.sh Run It! ./deploy.sh You should see output simillar to this\nDeployment manifest: '/home/ec2-user/bosh-deployment/bosh.yml' Deployment state: 'state.json' Started validating Downloading release 'bosh'... Skipped [Found in local cache] (00:00:00) Validating release 'bosh'... Finished (00:00:01) Downloading release 'bpm'... Skipped [Found in local cache] (00:00:00) Validating release 'bpm'... Finished (00:00:00) Downloading release 'bosh-aws-cpi'... Skipped [Found in local cache] (00:00:00) Validating release 'bosh-aws-cpi'... Finished (00:00:00) Downloading release 'os-conf'... Skipped [Found in local cache] (00:00:00) Validating release 'os-conf'... Finished (00:00:00) Validating cpi release... Finished (00:00:00) Validating deployment manifest... Finished (00:00:00) Downloading stemcell... Skipped [Found in local cache] (00:00:00) Validating stemcell... Finished (00:00:00) Finished validating (00:00:02) Started installing CPI Compiling package 'ruby-2.6.5-r0.29.0/269dc54d5306119b0e4f89be04f6c470b4876f552753815586fd1ab8ebeaa70d'... Finished (00:01:49) Compiling package 'bosh_aws_cpi/dcda0118570e8de60bac99ba59aecb4c5f10b19b8a37771ba758cdfaaa1a80b2'... Finished (00:00:02) Installing packages... Finished (00:00:00) Rendering job templates... Finished (00:00:00) Installing job 'aws_cpi'... Finished (00:00:00) Finished installing CPI (00:01:52) Uploading stemcell 'bosh-aws-xen-hvm-ubuntu-xenial-go_agent/621.71'... Finished (00:00:03) Started deploying Creating VM for instance 'bosh/0' from stemcell 'ami-0b1e748464b9b7470 light'... Finished (00:00:23) Waiting for the agent on VM 'i-074fee967757f0f1f' to be ready... Finished (00:01:51) Creating disk... Finished (00:00:09) Attaching disk 'vol-071ff280862d0caf7' to VM 'i-074fee967757f0f1f'... Finished (00:00:15) Rendering job templates... Finished (00:00:05) Compiling package 'golang/e84bb0a48f00f92e3a1086feb199436af258b568'... Skipped [Package already compiled] (00:00:00) Compiling package 'ruby-2.6.5-r0.29.0/269dc54d5306119b0e4f89be04f6c470b4876f552753815586fd1ab8ebeaa70d'... Finished (00:01:48) Compiling package 'ruby-2.6.5-r0.29.0/269dc54d5306119b0e4f89be04f6c470b4876f552753815586fd1ab8ebeaa70d'... Skipped [Package already compiled] (00:00:00) Compiling package 'mysql/440cfa0993fc387154f20775119925d74440a8247fc9c58976c9ee99c1bdcba7'... Skipped [Package already compiled] (00:00:00) Compiling package 'libpq/a83e0662fb3d483552de8e02df46809b6c6755e6f64f83f1cac244db61b5c342'... Skipped [Package already compiled] (00:00:00) Compiling package 'tini/3d7b02f3eeb480b9581bec4a0096dab9ebdfa4bc'... Skipped [Package already compiled] (00:00:00) Compiling package 'bpm-runc/796202c2568ebf561fc62617e8e2909986b60a7e'... Skipped [Package already compiled] (00:00:00) Compiling package 'verify_multidigest/64d1958934e10a0eccc05ddf0d7ba0c8215e6f6d4c227cb93998087335378fa8'... Skipped [Package already compiled] (00:00:00) Compiling package 'postgres-9.4/601f3635b43d0e7ba3ae866e3bd69425cdf33f7fb34a7f1bb21cc26818fb598e'... Skipped [Package already compiled] (00:00:00) Compiling package 'bosh_aws_cpi/dcda0118570e8de60bac99ba59aecb4c5f10b19b8a37771ba758cdfaaa1a80b2'... Finished (00:00:03) Compiling package 'davcli/58f558960854f58c55e3d506d3906019178dbc189fbbed1616b8b3c7c02142ea'... Skipped [Package already compiled] (00:00:00) Compiling package 'director/7da7966c7452459aec32b4b60654ae77e4fb34f9888b70861ecb84a82d342b57'... Skipped [Package already compiled] (00:00:00) Compiling package 's3cli/7e752dee192da026f6a0cdf2653b855cc6efbe6b041564660f8520c39ddd5a78'... Skipped [Package already compiled] (00:00:00) Compiling package 'health_monitor/5b655029a0794bd4bda04196accf9c9fb2b9a6217aef9833242a9f26d119c2f7'... Skipped [Package already compiled] (00:00:00) Compiling package 'bosh-gcscli/52223432539bbd0607db053f542440869688b4404dd65f2ddf33c2d195b1b891'... Skipped [Package already compiled] (00:00:00) Compiling package 'nginx/4cf27fedc69b8b74c26b1e45df7ea715dc9eb427654aab00ef652182b7d81bb5'... Skipped [Package already compiled] (00:00:00) Compiling package 'postgres-10/42474d2a099578fd2c4632dca3e90161e2a9e112cc8495ac39be56c7a1792e10'... Skipped [Package already compiled] (00:00:00) Compiling package 'bpm/8366da1860667621bdbce0891ffac62597e673ff'... Skipped [Package already compiled] (00:00:00) Compiling package 'registry/14b4ba14f98eb9c07ae31f119358f07e4db08c581ab37979035f31bec3795141'... Skipped [Package already compiled] (00:00:00) Compiling package 'gonats/f58980bd4b0436ff65f588627116dfff63f346f4d13175b7ba47380ab89e08a6'... Skipped [Package already compiled] (00:00:00) Updating instance 'bosh/0'... Finished (00:00:10) Waiting for instance 'bosh/0' to be running... Finished (00:00:35) Running the post-start scripts 'bosh/0'... Finished (00:00:01) Finished deploying (00:05:24) Cleaning up rendered CPI jobs... Finished (00:00:00) Succeeded Elastic IP The last thing we need to do is associate the Elastic IP with the director we just created.\n In EC2 go to Elastic IPs Find the IP you allocated earlier and right click it. Go to Associate Address    Choose your Director in the Instance field. (HINT: It should be called bosh/0) Choose your Private IP. (It should be 10.0.0.6)   Connect to Director # Configure local alias bosh alias-env aws -e 10.0.0.6 --ca-cert \u0026lt;(bosh int ./creds.yml --path /director_ssl/ca) # Log in to the Director export BOSH_CLIENT=admin export BOSH_CLIENT_SECRET=`bosh int ./creds.yml --path /admin_password` # Query the Director for more info bosh -e aws env "});index.add({'id':2,'href':'/docs/3_cloud-config/','title':"3 Cloud Config",'content':"Cloud Config A Cloud Config will act as the interface between your IaaS and your deployments. It allows you to establish T-Shirt sizes for disk and compute resources.\nTo see what cloud configurations are in your environment:\nbosh -e aws cloud-config You should see this:\nUsing environment '10.0.0.6' as client 'admin' No cloud config Exit code 1 Let’s create a file named cloud-config.yml\nazs: - name: z1 cloud_properties: {availability_zone: us-east-1a} vm_types: - name: small cloud_properties: instance_type: t2.micro ephemeral_disk: {size: 3000, type: gp2} - name: medium cloud_properties: instance_type: m3.medium ephemeral_disk: {size: 30000, type: gp2} disk_types: - name: small disk_size: 3000 cloud_properties: {type: gp2} - name: large disk_size: 50_000 cloud_properties: {type: gp2} networks: - name: public type: manual subnets: - range: 10.0.0.0/24 gateway: 10.0.0.1 az: z1 reserved: [10.0.0.1-10.0.0.20, 10.0.0.45] dns: [8.8.8.8] cloud_properties: {subnet: \u0026lt;SUBNET ID\u0026gt;} - name: vip type: vip compilation: workers: 5 reuse_compilation_vms: true az: z1 vm_type: medium network: public Now let’s apply the new cloud config\nbosh -e aws update-cloud-config cloud-config.yml If all goes well you’ll see this output:\nSucceeded "});index.add({'id':3,'href':'/docs/4_bosh-releases/','title':"4 Bosh Releases",'content':"Bosh Releases Software is packaged in the form of releases. We will deploy it later via a deployment with a custom manifest file.\nCheck out Bosh.io’s Releases page and find “cloudfoundry-incubator/envoy-nginx-release”\nWe will be deploying this release. Run this command:\nbosh -e aws upload-release --sha1 13cf87b2394c7d3924f9d66836c56302fb46a90d https://bosh.io/d/github.com/cloudfoundry-community/nginx-release?v=1.17.0 Now verify you can see the nginx release:\nbosh -e aws releases "});index.add({'id':4,'href':'/docs/5_stemcells/','title':"5 Stemcells",'content':"Stemcells Now before we can deploy Nginx, we need an Operating System image. This is the stemcell.\nLet’s check the stemcells loaded into the system\nbosh -e aws stemcells There shouldn’t be any loaded. Let’s load a stemcell:\nbosh -e aws upload-stemcell https://bosh.io/d/stemcells/bosh-aws-xen-hvm-ubuntu-xenial-go_agent?v=621.69 Now you can check to see if it uploaded successfully\nbosh -e aws stemcells "});index.add({'id':5,'href':'/docs/6_bosh-deployments/','title':"6 Bosh Deployments",'content':"Bosh Deployments Now let’s deploy the Nginx release. Go to the Cloud Foundry Nginx Github page. We’ll be needing the manifest to deploy it. Navigate to manifests/nginx-lite.yml. Copy the contents of this file to nginx.yml on your jumpbox.\nOnce you have it try to deploy it.\nbosh -e aws -d nginx deploy ./nginx.yml You should see the following error\nError: Instance group 'nginx' references an unknown disk type 'default' The reason for the error is because the deployment is referencing an invalid disk type. If you pull up your cloud config, you’ll notice you don’t have a default disk. You’ll need to edit your nginx.yml file to make it correspond to the cloud config.\nTry to deploy it once again.\nbosh -e aws -d nginx deploy ./nginx.yml This should be the output\nTask 11 | 01:47:29 | Preparing package compilation: Finding packages to compile (00:00:00) Task 11 | 01:47:29 | Compiling packages: nginx/66c3f00b386cb6166d60748308b27fa31f4285ad2eac86024e7166b29837bf0d (00:04:39) Task 11 | 01:52:42 | Creating missing vms: nginx/05eeb5fd-687b-4f84-8f09-9af220e314d0 (0) Task 11 | 01:52:42 | Creating missing vms: nginx/85fc0e69-3a2c-4e77-b845-f1f2810d84a1 (1) (00:02:24) Task 11 | 01:55:10 | Creating missing vms: nginx/05eeb5fd-687b-4f84-8f09-9af220e314d0 (0) (00:02:28) Task 11 | 01:55:11 | Updating instance nginx: nginx/05eeb5fd-687b-4f84-8f09-9af220e314d0 (0) (canary) (00:00:39) Task 11 | 01:55:50 | Updating instance nginx: nginx/85fc0e69-3a2c-4e77-b845-f1f2810d84a1 (1) (00:00:38) Task 11 Started Tue Apr 28 01:47:29 UTC 2020 Task 11 Finished Tue Apr 28 01:56:28 UTC 2020 Task 11 Duration 00:08:59 Task 11 done Once it deploys check the VM’s that it created.\nbosh -e aws -d nginx vms The output should be\nInstance Process State AZ IPs VM CID VM Type Active Stemcell nginx/05eeb5fd-687b-4f84-8f09-9af220e314d0 running z1 10.0.0.21 i-0217a03c4c1eaa006 small true bosh-aws-xen-hvm-ubuntu-xenial-go_agent/621.69 Now confirm nginx is working properly\ncurl 10.0.0.21 Scaling Let’s scale our nginx.yml deployment from 1 to 2 instances. Once the file is updated try to redeploy with bosh -e aws -d nginx deploy nginx.yml. You should see the delta.\nUsing environment '10.0.0.6' as client 'admin' Using deployment 'nginx' instance_groups: - name: nginx - instances: 1 + instances: 2 Continue? [yN]: Once the operation completes get the VMs again:\nbosh -e aws -d nginx vms You should now see two nginx VMs\nUsing environment '10.0.0.6' as client 'admin' Task 13. Done Deployment 'nginx' Instance Process State AZ IPs VM CID VM Type Active Stemcell nginx/05eeb5fd-687b-4f84-8f09-9af220e314d0 running z1 10.0.0.21 i-0217a03c4c1eaa006 small true bosh-aws-xen-hvm-ubuntu-xenial-go_agent/621.69 nginx/85fc0e69-3a2c-4e77-b845-f1f2810d84a1 running z1 10.0.0.22 i-0a3dac299b5c44696 small true bosh-aws-xen-hvm-ubuntu-xenial-go_agent/621.69 2 vms Succeeded Upgrade Stemcell Now over time stemcells will be released with patched CVE’s or other updates. It’s very easy to update to the latest version.\nFirst let’s upload a newer stemcell:\nbosh -e aws upload-stemcell https://bosh.io/d/stemcells/bosh-aws-xen-hvm-ubuntu-xenial-go_agent?v=621.71 Check the stemcells loaded in the environment\nbosh -e aws stemcells Output\nUsing environment '10.0.0.6' as client 'admin' Name Version OS CPI CID bosh-aws-xen-hvm-ubuntu-xenial-go_agent 621.71 ubuntu-xenial - ami-0b1e748464b9b7470 light ~ 621.69* ubuntu-xenial - ami-02ff958a8af2e0d0c light (*) Currently deployed 2 stemcells Succeeded The act of uploading a new stemcell does not update any active deployments. You’ll need to do that separately.\nNote\nActive stemcells will have an * next to their version numbers. You cannot delete a stemcell that’s currently being used by a deployment. Let’s update our nginx deployment to use the latest stemcell. In this case we stated we wanted to use the latest version of ubuntu-xenial so we don’t need to make a manifest change. To apply the change just run this command\n bosh -e aws -d nginx deploy nginx.yml Output\nUsing environment '10.0.0.6' as client 'admin' Using deployment 'nginx' stemcells: + - alias: ubuntu + os: ubuntu-xenial + version: '621.71' - - alias: ubuntu - os: ubuntu-xenial - version: '621.69' Continue? [yN]: After this completes check the stemcells again\nbosh -e aws stemcells Output\nbosh-aws-xen-hvm-ubuntu-xenial-go_agent 621.71* ubuntu-xenial - ami-0b1e748464b9b7470 light ~ 621.69 ubuntu-xenial - ami-02ff958a8af2e0d0c light (*) Currently deployed 2 stemcells Succeeded "});index.add({'id':6,'href':'/docs/7_cleanup/','title':"7 Cleanup",'content':"Cleanup Now that we have an environment let’s clean it up and delete everything we just created.\nFirst let’s delete our deployment\nbosh -e aws -d nginx delete-deployment After our deployment is gone let’s delete the BOSH Director itself. Copy your deploy.sh script to destroy.sh and change create-env to delete-env and run destroy.\ncp deploy.sh destroy.sh ./destroy.sh After the Bosh director is gone you can go ahead and delete the Jumpbox, and any other AWS resources you created!\nYou’ve completed the Bosh Workshop!\nCongratulations!\n"});index.add({'id':7,'href':'/docs/','title':"Docs",'content':""});})();